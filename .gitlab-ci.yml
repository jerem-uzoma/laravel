stages:
  - test
  - build
  - deploy

variables:
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  SAST_IMAGE_SUFFIX: ""

  SAST_EXCLUDED_ANALYZERS: ""
  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp"
  SCAN_KUBERNETES_MANIFESTS: "false"

sast:
  stage: test
  artifacts:
    reports:
      sast: gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1

.sast-analyzer:
  extends: sast
  allow_failure: true
  script:
    - /analyzer run

phpcs-security-audit-sast:
  extends: .sast-analyzer
  image:
    name: "$SAST_ANALYZER_IMAGE"
  variables:
    SAST_ANALYZER_IMAGE_TAG: 3
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/phpcs-security-audit:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /phpcs-security-audit/
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.php'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'



.dockerize-setup: &dockerize-setup
  - apk add --no-cache curl jq python3 py3-pip
  - pip install awscli
  - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
  - export AWS_DEFAULT_REGION=us-west-2
  - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY_IMAGE_URI

.dockerize-check-exists: &dockerize-check-exists
  - EXISTING=$(aws ecr describe-images --repository-name "$DOCKER_REPOSITORY" --image-ids=imageTag=${CI_COMMIT_SHORT_SHA} | jq '.imageDetails[0].imageTags[0]' -r) || true
  - |
    if [[ ! -z $EXISTING ]]
    then
      echo "Image already exists. Exiting..."
      exit 0
    fi

.dockerize-build: &dockerize-build
  - docker build -t $DOCKER_SHA_TAG .
  - docker push $DOCKER_SHA_TAG

dockerize:
  retry: 2
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_REPOSITORY: Laravel-${CI_COMMIT_BRANCH}
    DOCKER_SHA_TAG: ${ECR_REGISTRY_IMAGE_URI}/Laravel-${CI_COMMIT_BRANCH}:${CI_COMMIT_SHORT_SHA}
  script:
    - *dockerize-setup
    - *dockerize-check-exists
    - *dockerize-build
  only:
    - master

eks-deploy:
  stage: deploy
  variables:
    DOCKER_SHA_TAG: ${ECR_REGISTRY_IMAGE_URI}/Laravel-${CI_COMMIT_BRANCH}:${CI_COMMIT_SHORT_SHA}
    AWS_REGION: ${AWS_REGION}
    EKS_CLUSTER_NAME: ${EKS_CLUSTER_NAME}
  images: bearengineer/awscli-kubectl:latest
  script:
    - aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
    - kubectl apply -f .docker/deployment.yaml
  only:
    - master
